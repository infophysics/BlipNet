# Test config file for Blip
module:
  module_name:  'blipnet_v1'
  module_type:  ['ml']
  module_mode:  ['training']
  gpu:          True
  gpu_device:   0
  verbose:      False

dataset:
  dataset_folder: "/home/ncarrara/physics/neutron/"
  dataset_files:  []
  dataset_type:   ''
  normalized:     true
  # ---- variables ----
  # Here we specify the location of the GUT variables in the files
  # and the weak values associated to the trial points.
  positions: []
  features: []
  classes: []
  labels: []
  # ---- normalization ----
  # Normalization parameters for positions and features.  Typically we want to normalize
  # input features depending on the type of task, or to unbias certain simulation parameters,
  # e.g. by normalizaing ADC over an event sample we remove the overall scale of the detector
  # response.
  position_normalization:   []
  features_normalization:   []

loader:
  loader_type:      ""
  batch_size:       2
  test_split:       0.0
  test_seed:        0
  validation_split: 0.0
  validation_seed:  0
  num_workers:      4

training:
  iterations:   1
  epochs:       10
  checkpoint:   10
  patience: -1
  grad_norm:    false
  progress_bar: true        # train, validation, test, all
  rewrite_bar:      false # wether to leave bars after each epoch
  save_predictions: false  # wether to save network outputs in original file
  prediction_outputs: []
  skip_metrics: true
  seed:         0

model:
  # uncomment the line below and specify the model to load from a checkpoint.
  # load_model:   ".checkpoints/checkpoint_200.ckpt"
  BlipNet:
    training: true
    fragment_clustering:
      dbscan_eps: 0.5
      dbscan_min_samples: 5
      dbscan_metric: "euclidean"
      cluster_features: ['positions']
    interaction_clustering:
      dbscan_eps: 5.0
      dbscan_min_samples: 3
      dbscan_metric: "euclidean"
      cluster_features: ['fragment_edge_embedding', 'fragment_edge_classification']
    aggregation:
      fragment_node_features: ['fragment_node_embedding']
      fragment_edge_features: ['fragment_edge_embedding', 'fragment_edge_classification']
      node_output_label: 'fragment_pooled_embedding'
      edge_index_output_label: 'fragment_pooled_edge_indices'
    position_embedding:
      input_dimension: 3
      output_dimension: 25
      residual_connection: true
      input_position_label: 'positions'
      input_edge_index_label: 'fragment_edge_indices'
      output_features_label: 'position_embedding'
      layers: [5, 10, 15, 25]
      dropout: true
      dropout_amount: 0.3
      activation: 'leaky_relu'
      activation_params:    {'negative_slope': 0.02}
    fragment_node_embedding:
      input_dimension: 44
      output_dimension: 25
      residual_connection: true
      input_position_label: ['positions', 'position_embedding', 'features']
      input_edge_index_label: 'fragment_edge_indices'
      output_features_label: 'fragment_node_embedding'
      layers: [50, 100, 25]
      dropout: true
      dropout_amount: 0.3
      activation: 'leaky_relu'
      activation_params:    {'negative_slope': 0.02}
    fragment_edge_embedding:
      type: 'node_neighbors'
      input_dimension: 50
      output_dimension: 25
      residual_connection: true
      input_position_label: 'fragment_node_embedding'
      input_edge_index_label: 'fragment_edge_indices'
      output_features_label: 'fragment_edge_embedding'
      layers: [50, 100, 25]
      dropout: true
      dropout_amount: 0.3
      activation: 'leaky_relu'
      activation_params:    {'negative_slope': 0.02}
    fragment_node_classifier:
      input_dimension: 25
      output_dimension: 1
      residual_connection: false
      input_position_label: 'fragment_node_embedding'
      input_edge_index_label: 'fragment_edge_indices'
      output_features_label: 'fragment_node_classification'
      layers: [4]
      dropout: false
      dropout_amount: 0.0
      activation: 'sigmoid'
      activation_params: {}
    fragment_edge_classifier:
      type: 'edge'
      input_dimension: 25
      output_dimension: 1
      residual_connection: false
      input_position_label: 'fragment_edge_embedding'
      input_edge_index_label: 'fragment_edge_indices'
      output_features_label: 'fragment_edge_classification'
      layers: [1]
      dropout: false
      dropout_amount: 0.0
      activation: 'sigmoid'
      activation_params: {}
    interaction_node_embedding:
      input_dimension: 51
      output_dimension: 25
      residual_connection: true
      input_position_label: 'fragment_pooled_embedding'
      input_edge_index_label: 'fragment_pooled_edge_indices'
      output_features_label: 'interaction_node_embedding'
      layers: [50, 100, 25]
      dropout: true
      dropout_amount: 0.3
      activation: 'leaky_relu'
      activation_params:    {'negative_slope': 0.02}
    interaction_edge_embedding:
      type: 'node_neighbors'
      input_dimension: 102
      output_dimension: 25
      residual_connection: true
      input_position_label: 'fragment_pooled_embedding'
      input_edge_index_label: 'fragment_pooled_edge_indices'
      output_features_label: 'interaction_edge_embedding'
      layers: [50, 100, 25]
      dropout: true
      dropout_amount: 0.3
      activation: 'leaky_relu'
      activation_params:    {'negative_slope': 0.02}
    interaction_edge_classifier:
      type: 'edge'
      input_dimension: 25
      output_dimension: 1
      residual_connection: false
      input_position_label: 'interaction_edge_embedding'
      input_edge_index_label: 'interaction_edge_indices'
      output_features_label: 'interaction_edge_classification'
      layers: [1]
      dropout: false
      dropout_amount: 0.0
      activation: 'sigmoid'
      activation_params: {}

criterion:
  FragmentNodeLoss:
    alpha: 1
    target: 'fragment_truth'
    output: 'fragment_node_classification'
  FragmentEdgeLoss:
    alpha: 1
    target: 'fragment_edge_truth'
    output: 'fragment_edge_classification'
  ContrastiveFragmentLoss:
    alpha: 1
    temperature: 0.1
    target: 'fragment_edge_truth'
    output: 'fragment_edge_embedding'
  InteractionEdgeLoss:
    alpha: 1
    target: 'interaction_edge_purity'
    output: 'interaction_edge_classification'

metrics:

callbacks:

optimizer:
  optimizer_type: "Adam"
  learning_rate:  0.01
  betas:          [0.9, 0.999]
  epsilon:        1e-08
  weight_decay:   0.001
  momentum:       0.9